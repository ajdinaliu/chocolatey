# ¨°º©o¿,,¿o©º°¨¨°º©o¿,,¿o©º°¨¨°º©o¿,,¿o©º°¨¨°º©o¿,,¿o©º°¨
#
#    Author: © AJAL
#    Date  : 30.06.2015
#    Goal  : Get Choco Package Install Wizard
#
# ¨°º©o¿,,¿o©º°¨¨°º©o¿,,¿o©º°¨¨°º©o¿,,¿o©º°¨¨°º©o¿,,¿o©º°¨

#################
# CONFIGURATION #
#################

#################
# VARIABLES     #
#################
$DebugLevel = 0 														#Debud mode
$scriptName				= "Get-ChocoWizard"								# Name of this script, obviously.
$scriptVersion			= "0.0.0.1"										# ScriptVersion
$scriptQual				= "Beta"										# Release to Web
$sessionKey				= [Guid]::NewGuid().ToString()					# Session key, used for keeping records unique between multiple runs.
$logFolder				= "$($env:Temp)\$($scriptName)\$($sessionKey)"	# Log folder path.
$transcripting			= $false


# Banner text displayed during each run.
$scriptHeader = @"

AJAL $scriptName - Released under the Apache 2.0 License
Version $scriptVersion $scriptQual

"@
# Text used as the banner in the UI.
$ScriptUIHeader  = @"
Use the fields below to configure Package, Version, Source, PackageParameters for the packages that you want to install!
"@
# Text used for flag
$ScriptflagText = @"
This $VHDFormat was installed by $scriptName $scriptVersion $scriptQual
on $([DateTime]::Now).
"@

###################
# CHOCO VARIABLES #
###################
# chocolatey variables - https://github.com/chocolatey/choco/wiki/HelpersReference
$packageName=$env:packageName 							# PackgageName of this package. The package name, which is equivalent to the <id> tag in the nuspec 
$packageVersion=$env:packageVersion						# The package version, which is equivalent to the <version> tag in the nuspec



#fix_ if choco variable "packageName" empty
	If (!$packageName){
		#SayWarn "Chocolatey variable PackgageName not evaluated!" 					#<id> tag in the nuspec
		$packageName=$sessionKey
	}
# temp path
$chocTempDir = Join-Path $env:TEMP "chocolatey"
$tempDir = Join-Path $chocTempDir "chocInstall"
if (![System.IO.Directory]::Exists($tempDir)) {[System.IO.Directory]::CreateDirectory($tempDir)}
$ZIPfile = Join-Path $tempDir "$packageName.zip"

###################
# Get-ChocoWizard #
###################
# Dialogue config
$Global:GCWLocalRepository 													# used to save local Repository with NuGet Packages
[System.Collections.ArrayList]$Global:arrSelectedPackages = @()		# Create an empty Array to save seleceted packages
[System.Collections.ArrayList]$Global:arrInstalledPackages = @()	# ToDo: installed packages - save output
[System.Collections.ArrayList]$arrCheckBoxArrayList = @()					# Create an empty Array to work with
	
# Hard Coded Variables
[string]$MyNuGetFeed="https://www.myget.org/F/ajal_pub/api/v2"		#Todo: not hardcoded

#################
# FUNCTIONS 	#
#################

##########################################################################################
#General output Functions 
Function SayDebug {
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]
		[ValidateNotNullOrEmpty()]
		$text
	)
	
    If ($DebugLevel -ge 1){        
		If ($text){
			Write-Host "DEBUG   : $($text)" -ForegroundColor Yellow
		} else {
			Write-Host
		}		
    }
}
Function SayInfo {    
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]
		[ValidateNotNullOrEmpty()]
		$text
	)
	
    If ($text){
        Write-Host "INFO   : $($text)" -ForegroundColor White
    }else {
		Write-Host
	}
}
Function SayOK {	
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]
		[ValidateNotNullOrEmpty()]
		$text
	)
	
    If ($text){
        Write-Host "==>   : $($text)" -BackgroundColor DarkGreen
    }else {
		Write-Host
	}	
}
Function SayWarn{    
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]
		[ValidateNotNullOrEmpty()]
		$text
	)
	Write-Host "WARN   : $($text)" -ForegroundColor Yellow
}
Function SayError{    
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]
		[ValidateNotNullOrEmpty()]
		$text
	)
	Write-Host "ERROR  : $($text)" -ForegroundColor Red
}
Function SayTrace{    
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[string]
		[ValidateNotNullOrEmpty()]
		$text
	)
	Write-Verbose $text
}

##########################################################################################
#tell me, running as admin or limited
Function Test-Admin{	
	$currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
	$isAdmin = $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
	SayTrace "isUserAdmin? $isAdmin"
	return $isAdmin
}
##########################################################################################
#ToDo - Choco Logfile?

##########################################################################################
# download the package
# Download-File $url $file
# download 7zip
# Write-Host "Download 7Zip commandline tool"
# $7zaExe = Join-Path $tempDir '7za.exe'

# unzip the package
# Write-Host "Extracting $file to $tempDir..."
# Start-Process "$7zaExe" -ArgumentList "x -o`"$tempDir`" -y `"$file`"" -Wait -NoNewWindow
function Download-File {
param (
  [string]$url,
  [string]$file
 )
  Write-Host "Downloading $url to $file"
  $downloader = new-object System.Net.WebClient
  $downloader.Proxy.Credentials=[System.Net.CredentialCache]::DefaultNetworkCredentials;
  $downloader.DownloadFile($url, $file)
}

##########################################################################################
Function GlobalMemoryCleanup{	
	if ($PIMountPath){
		Clear-Variable -Name GCWLocalRepository -Scope Global -Force
		Remove-Variable -Name arrSelectedPackages -Scope Global -Force
		Remove-Variable -Name arrInstalledPackages -Scope Global -Force
    }
}

#################
# MAIN 			#
#################
Write-Host $scriptHeader -ForegroundColor Gray
Write-Host "*************************************************************" -ForegroundColor Gray

# Create log folder
if (Test-Path $logFolder) {
	$null = rd $logFolder -Force -Recurse
}
$null = md $logFolder -Force
# Try to start transcripting.  If it's already running, we'll get an exception and swallow it.
try {
	$null = Start-Transcript -Path (Join-Path $logFolder "$($scriptName).log") -Force -ErrorAction SilentlyContinue
	$transcripting = $true
} catch {
	SayWarn "Transcription is already running.  No $($scriptName)-specific transcript will be created."
	$transcripting = $false
}

# Check to make sure we're running as Admin.
if (!(Test-Admin)) {
	throw "Packages can only be installed by an administrator. Please launch PowerShell elevated and run this script again."
}


	SayInfo "Launching UI..."
	#region UI
	Add-Type -AssemblyName System.Drawing,System.Windows.Forms	
	# Import the Assemblies
	#[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
	#[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null

	#prepare environment for System.Windows.Forms and show PackageRepositoryLocation
	#[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null	

	#region FormObjects
	$openFolderDialog 				= New-Object Windows.Forms.FolderBrowserDialog
	$InitialFormWindowState 		= New-Object System.Windows.Forms.FormWindowState
	$formMain 						= New-Object System.Windows.Forms.Form
	$InstallPacakgesbutton 			= New-Object System.Windows.Forms.Button
	$Cancelbutton 					= New-Object System.Windows.Forms.Button
	$listBoxPackages1 				= New-Object System.Windows.Forms.CheckedListBox
	#endregion FormObjects
	
	#region Event
	$OnLoadForm_StateCorrection={# Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Cancelbutton_OnClick={
		#LogWrite ">> Updates selection canceled!"		
		$formMain.Close()
	}	
		
	$InstallPacakgesbutton_OnClick={				
		if ($listBoxPackages1.CheckedItems.Count -eq 0) # Check if anything is selected
		{
			[System.Windows.Forms.MessageBox]::Show("Nothing Checked. Click cancel to close dialogue or mark package(s) for processing!")			
		}
		else{
					
			$formMain.hide()								# hide LocallRepository Form
			
			$AmountSelected = $listBoxPackages1.CheckedItems.Count
			foreach ($itemChecked in $listBoxPackages1.CheckedItems){
				$Global:arrSelectedPackages.Add($itemChecked)
				#Todo! write-host ">> Selected packages Folder: $UpdateFolderItem"
			}
			#Todo: change this_ SayOK "$AmountSelected package folder(s) selected."
			$formMain.Close()
		}
	}
		
	# endregion Event	

	#region FormCode	
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 561
	$System_Drawing_Size.Width = 584
	$formMain.ClientSize = $System_Drawing_Size
	$formMain.DataBindings.DefaultDataSourceUpdateMode = 0
	$formMain.Name = "formMain"
	$formMain.Text = "$scriptName - AJAL "
	$openFolderDialog.Description = "Choose the Root of your local Package Repository"
	
	#region InstallPacakges button
	$InstallPacakgesbutton.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 442
	$System_Drawing_Point.Y = 511
	$InstallPacakgesbutton.Location = $System_Drawing_Point
	$InstallPacakgesbutton.Name = "InstallPackages"
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 23
	$System_Drawing_Size.Width = 100
	$InstallPacakgesbutton.Size = $System_Drawing_Size
	$InstallPacakgesbutton.TabIndex = 2
	$InstallPacakgesbutton.Text = "Install Packages"
	$InstallPacakgesbutton.UseVisualStyleBackColor = $True
	$InstallPacakgesbutton.add_Click($InstallPacakgesbutton_OnClick)
	
	$formMain.Controls.Add($InstallPacakgesbutton)
	#endregion InstallPacakges button
	#region Cancel button
	$Cancelbutton.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 59
	$System_Drawing_Point.Y = 511
	$Cancelbutton.Location = $System_Drawing_Point
	$Cancelbutton.Name = "Cancelbutton"
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 23
	$System_Drawing_Size.Width = 75
	$Cancelbutton.Size = $System_Drawing_Size
	$Cancelbutton.TabIndex = 1
	$Cancelbutton.Text = "Cancel"
	$Cancelbutton.UseVisualStyleBackColor = $True
	$Cancelbutton.add_Click($Cancelbutton_OnClick)
	
	$formMain.Controls.Add($Cancelbutton)
	#endregion Cancel button
	#region listbox
	$listBoxPackages1.DataBindings.DefaultDataSourceUpdateMode = 0
	$System_Drawing_Point = New-Object System.Drawing.Point
	$System_Drawing_Point.X = 12
	$System_Drawing_Point.Y = 1
	$listBoxPackages1.Location = $System_Drawing_Point
	$listBoxPackages1.Name = "listBoxPackages1"	
	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Height = 484
	$System_Drawing_Size.Width = 560	
	$listBoxPackages1.Size = $System_Drawing_Size
	$listBoxPackages1.TabIndex = 0
	#$listBoxPackages1.SelectionMode =  "One"	
	$listBoxPackages1.FormattingEnabled = $True
	#endregion listbox
	
	#region ListBoxCode
	#SayDebug "Listing Packages..."	
	#LogWrite ">> Listing Packages..."
	
	#Get choco packages	
	$itemPackages = choco list -source $MyNuGetFeed
	# $Global:arrSelectedPackages
	# $PkgItems = @(get-childitem $PIMDTUpdRoot -Recurse | ? { $_.NodeType -eq "Package" }).Count	
	# Write-Host "Total of packages found:" $PkgItems
	
		#region FilterPackages
		#Add "packages" to array
		foreach ($itemPackage in $itemPackages) { 						
				#Filter out this package
				If ($itemPackage -notmatch $packageName){
					$arrCheckBoxArrayList.Add($itemPackage) | Out-Null
				}
				#Todo: Package Parameters
			<# 			if($itemPackage.nodetype -eq 'PackageFolder') 
							{
								#Write-Host $itemPackage.Name
								#$SplitVariable = $itemPackage.Name 
								$SplitVariable = ($itemPackage.PSParentPath).SubString(52)+"\"+$itemPackage.Name 
								$arrCheckBoxArrayList += $SplitVariable
							}
			 #>	
		}		
		
		$arrCheckBoxArrayList.Remove($arrCheckBoxArrayList[0])					# Remove "chocolatey vx.x.x.x" - ToDo: check listheader; "choco list -source" - 1st item='Chocolatey v x.x.x.x' ?		
		$arrCheckBoxArrayList.Remove($arrCheckBoxArrayList[-1])				# Remove "n packages found" - check listfooter		
		#$arrCheckBoxArrayList = $arrCheckBoxArrayList | sort -Unique			# Only select unique packages in array - ku ta dish?:)
	
	
		foreach($itemPckg in $arrCheckBoxArrayList) {
			$listBoxPackages1.Items.Add($itemPckg)|Out-Null				# Add checkboxes to CheckedListBox object
		}
		#endregion FilterPackages
	
	$formMain.Controls.Add($listBoxPackages1)
	#endregion ListBoxCode
		
	# Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState

	# Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($OnLoadForm_StateCorrection)

	#openFolder
	$openFolderDialog.ShowDialog( )| Out-Null

	$Global:GCWLocalRepository = $openFolderDialog.SelectedPath
	If ($Global:GCWLocalRepository){
		$Message = "Local Package Repository selected: " + $Global:GCWLocalRepository
		SayInfo $Message
		Remove-Variable Message
		
		SayInfo "Get Choco Packages from LocalRepository"
		
	}
	#endregion FormCode
	#InstallPackages
	$formMain.ShowDialog()
	$formMain.Dispose()
	
	
	#endregion UI

	SayInfo "Packagename $packageName"
#fix no packageName
If ($packageName -eq $sessionKey){
	SayWarn "could not resolve Chocolatey variable PackgageName!"
}
#Install all selected packages
foreach($itemPackage in $Global:arrSelectedPackages) {						
	#$UpdateFolderItem = $PIMDTUpdRoot+$_+"\*"							
	#$MyPackageItem = $itemPackage.ToString()	
	#LogWrite ">> Current packages Folder: $MyPackageItem"	
    #InstallPackage $MyPackageItem
	$MyPackageDetails = $itemPackage.Split()
	$MyPackageName = $MyPackageDetails[0]
    $MyPackageVer = $MyPackageDetails[1]
	$MyPackageArgs = ""

    #write-host ">> Current package : $MyPackageItem"	
	choco install $MyPackageName --version $MyPackageVer --y --r #--package-parameters=$MyPackageArgs #--package-parameters=VALUE --user=VALUE --password=VALUE -pre Prereleases - Include Prereleases?
}
#Write-ChocolateySuccess $packageName finished!
#Write-Host Done! -ForegroundColor Green

GlobalMemoryCleanup

# Close out the transcript and tell the user we're done.
SayInfo "Done."
if ($transcripting) {
	$null = Stop-Transcript
}